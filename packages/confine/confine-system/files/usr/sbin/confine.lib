#!/bin/bash

set -u


# confine states (MUST be in order from worst to best"


CONFINE_RPC_DIR=/var/run/confine/rpc

CONFINE_CONTAINER_NR_MIN_DEC=1
CONFINE_CONTAINER_NR_MAX_DEC=126 # there are only 126 private IPs

CONFINE_VNET_PREFIX="slv"

UCI_DEFAULT_PATH=/etc/config
ERR_LOG_TAG='CONFINE'


. /usr/sbin/lxc.functions
. /usr/sbin/confine.functions



confine_system_check() {


    uci_show confine-defaults soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-defaults"
    uci_show confine-testbed  soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-testbed"
    uci_show confine-server   soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-server"
    uci_show confine-node     soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-node"
    uci_show confine-slices   soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-slices"
    uci_show confine-slivers  soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-slivers"
    uci_show confine-slice-attributes  soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-slice-attributes"

    uci_check_clean network
    uci_check_clean lxc

    uci changes -c $UCI_DEFAULT_PATH | grep -e "^confine-" > /dev/null && \
	err $FUNCNAME "confine confing dirty! Please commit or revert"

    [ -d $CONFINE_RPC_DIR ] || mkdir -p $CONFINE_RPC_DIR

}




confine_set_rd_state() {

    echo "$FUNCNAME $# $@" >&2
    local STATE=$1

    if [ "$STATE" = running ]; then
	confine_system_check

	uci_set confine-node.node.state=$STATE
	
    elif [ "$STATE" = installing ] || [ "$STATE" = maintenance ]; then
	
	local SLIVER=
	for SLIVER in $( uci_get_sections confine-slivers sliver soft,quiet ); do

	    confine_sliver_stop "SLIVER"
	done
	
	uci_set confine-node.node.state=$STATE
    else
	err $FUNCNAME "invalid state"
	
    fi
    
}


confine_allocate_container() {

    local SL_ID_HEX=$( check_slice_id $1 )
    local CT_NR_HEX=${SL_ID_HEX:10:2}

    local OPT_CMD=${2:-}
    local CMD_SOFT=$( echo "$OPT_CMD" | grep -e "soft" > /dev/null && echo "soft," )

    [ $(( 16#${CT_NR_HEX} )) -ge $CONFINE_CONTAINER_NR_MIN_DEC ] && [ $(( 16#${CT_NR_HEX} )) -le $CONFINE_CONTAINER_NR_MAX_DEC ] || \
	CT_NR_HEX=$( printf "%.2x\n" $CONFINE_CONTAINER_NR_MAX_DEC )

    local SLIVERS="$( uci_get_sections confine-slivers sliver soft )"
    local CONTAINERS="$( uci_get_sections lxc container soft )"

    local CONTAINER_NRS=
    local TMP_SL_ID=
    local TMP_CT_NR=

    for TMP_SL_ID in $SLIVERS ; do
	local HEX=$( uci_get confine-slivers.$TMP_SL_ID.container_nr soft,quiet)
	[ $HEX ] && CONTAINER_NRS="$( [ "$CONTAINER_NRS" ] && echo "$CONTAINER_NRS $HEX" || echo "$HEX" )"
    done

    for TMP_CT_NR in $CONTAINERS ; do
	local HEX=$( uci_get lxc.$TMP_CT_NR.container_nr soft,quiet)
	[ $HEX ] && CONTAINER_NRS="$( [ "$CONTAINER_NRS" ] && echo "$CONTAINER_NRS $HEX" || echo "$HEX" )"
    done

    #echo "SL_ID_HEX=$SL_ID_HEX CT_NR_HEX=$CT_NR_HEX SLIVERS=$SLIVERS CONTAINER_NRS=$CONTAINER_NRS" >&2


    if echo "$CONTAINER_NRS" | grep $CT_NR_HEX >/dev/null ; then

	CT_NR_HEX=

	local CT_NR_DEC=$(( 16#${CT_NR_HEX} ))
	local DEC=

	for DEC in $( seq $CONFINE_CONTAINER_NR_MIN_DEC $CONFINE_CONTAINER_NR_MAX_DEC ) ; do

	    local HEX=$( printf "%.2x\n" $(( ( $CONFINE_CONTAINER_NR_MAX_DEC + 1 ) - $DEC )) )

	    if ! echo "$CONTAINER_NRS" | grep $HEX >/dev/null ; then

		CT_NR_HEX=$HEX
		break
	    fi
	done
    fi

    [ $CT_NR_HEX ] || \
	{ err $FUNCNAME "Failed allocating container_nr" $CMD_SOFT; return 1; }
    
    echo $CT_NR_HEX
}


confine_allocate_public_ipv4() {

    local SL_ID_HEX=$( check_slice_id $1 )

    local OPT_CMD=${2:-}
    local CMD_SOFT=$( echo "$OPT_CMD" | grep -e "soft" > /dev/null && echo "soft," )

    local SLIVERS="$( uci_get_sections confine-slivers sliver soft )"
    local PROTO_IPS="$( uci_get confine-node.node.rd_public_ipv4_proto soft)"
    local AVAIL_IPS="$( uci_get confine-node.node.rd_public_ipv4_addrs soft)"
    local TMP_SL_ID=
    local TMP_IP=
    local USED_IPS=

    [ "$PROTO_IPS" = "static" ] || \
	err $FUNCNAME "pre-allocation of public ipv4 addresses only possible with node.rd_public_ipv4_proto=static"

    for TMP_SL_ID in $SLIVERS; do

	if [ "$( uci_get confine-slivers.$TMP_SL_ID.if01_type soft,quiet )" = "public" ]; then
	    TMP_IP=$( uci_get confine-slivers.$TMP_SL_ID.if01_ipv4 soft,quiet )

	    echo "$USED_IPS" | grep $TMP_IP >/dev/null && \
		err $FUNCNAME "public ip=$TMP_IP used twice !!!"

	    USED_IPS="$( [ "$USED_IPS" ] && echo "$USED_IPS $TMP_IP" || echo "$TMP_IP" )"
	fi
    done


    for TMP_IP in $AVAIL_IPS ; do

	if ! echo "$USED_IPS" | grep $TMP_IP > /dev/null; then

	    echo $TMP_IP
	    return 0

	fi
    done

    err $FUNCNAME "Failed allocating free public ip from $AVAIL_IPS" $CMD_SOFT

    return 1
}

confine_node_customize() {

    #echo "$FUNCNAME $# $@" >&2

    mkdir -p $CONFINE_RPC_DIR

    local SRC="${1:--}"
    local SRC_CFG=$( date +%s )-$BASHPID-customize
    local SRC_DIR=$CONFINE_RPC_DIR
    
    cat $SRC > $SRC_DIR/$SRC_CFG
    chmod u+x $SRC_DIR/$SRC_CFG
    
    $SRC_DIR/$SRC_CFG || \
	err $FUNCNAME "Failed executing rpc $SRC_DIR/$SRC_CFG"
}


confine_sliver_allocate() {

    echo "$FUNCNAME $# $@" >&2

    confine_system_check

    local SL_ID=$( check_slice_id $1 )
    local SRC="${2:--}"
    local SRC_CFG=$( date +%s )-$BASHPID-allocate-in
    local SRC_DIR=$CONFINE_RPC_DIR
    local SLC_CFG=$( date +%s )-$BASHPID-allocate-slice
    local SLV_CFG=$( date +%s )-$BASHPID-allocate-sliver
    local OUT_DIR=$CONFINE_RPC_DIR
    
    cat $SRC > $SRC_DIR/$SRC_CFG
#    cat $SRC_DIR/$SRC_CFG >&2

    local NODE_ID=$( uci_get confine-node.node.id )

#    local SL_ID=
#    for SL_ID in $( uci_get_sections $SRC_CFG sliver soft,path=$SRC_DIR ); do
#	SL_ID=$( check_slice_id $SL_ID )
    if [ "$( uci_get $SRC_CFG.$SL_ID soft,path=$SRC_DIR )" = "sliver" ] ; then


	uci_test confine-slices.$SL_ID soft,quiet && \
	    err $FUNCNAME "slice=$SL_ID already defined"

	uci_test confine-sliver.$SL_ID soft,quiet && \
	    confine_sliver_remove $SL_ID

	true && \
	    uci_test $SRC_CFG.$SL_ID.user_pubkey     soft,path=$SRC_DIR && \
	    uci_test $SRC_CFG.$SL_ID.fs_template_url soft,path=$SRC_DIR && \
	    uci_test $SRC_CFG.$SL_ID.exp_data_url    soft,path=$SRC_DIR || \
	    err $FUNCNAME "Missing obligatory sliver parameter in $SRC_CFG.$SL_ID..."

	confine_allocate_container $SL_ID soft >/dev/null|| \
	    err $FUNCNAME "Failed allocating container_nr"


	local VLAN_NR=$( uci_get $SRC_CFG.$SL_ID.vlan_nr soft,quiet,path=$SRC_DIR )
	if [ "$VLAN_NR" ] ; then

	    VLAN_NR=$( check_vlan_nr $VLAN_NR )
	    
	    local TMP_SLICES="$( uci_get_sections confine-slices slice soft )"
	    local TMP_SLICE=
	    for TMP_SLICE in $TMP_SLICES ; do

		if [ "$(uci_get confine-slices.$SL_ID.vlan_nr soft,quiet )" = "$VLAN_NR" ] ; then
		    err $FUNCNAME "$VLAN_NR already used by SLICE_ID $TMP_SLICE"
		fi
	    done

	    

	    confine_allocate_public_ipv4 $SL_ID soft >/dev/null|| \
		err $FUNCNAME "Failed allocating public ip"
	fi


	if [ "$( uci_get $SRC_CFG.$SL_ID.if01_type soft,quiet,path=$SRC_DIR )" = "public" ] && \
	    [ "$( uci_get $SRC_CFG.$SL_ID.if01_proto soft,quiet,path=$SRC_DIR )" = "static" ] ; then
	    
	    confine_allocate_public_ipv4 $SL_ID soft >/dev/null|| \
		err $FUNCNAME "Failed allocating public ip"
	fi
	
	


	echo "" > $OUT_DIR/$SLC_CFG
	uci_set $SLC_CFG.$SL_ID=slice path=$OUT_DIR
	uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.slice $OUT_DIR $SLC_CFG.$SL_ID user_pubkey
	uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.slice $OUT_DIR $SLC_CFG.$SL_ID vlan_nr
	uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.slice $OUT_DIR $SLC_CFG.$SL_ID fs_template_url
	uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.slice $OUT_DIR $SLC_CFG.$SL_ID exp_data_url



	local CT_NR=$( confine_allocate_container $SL_ID )
	local IF_KEYS="$( uci_get lxc.general.lxc_if_keys )"
	local MAC_PREFIX16=$( uci_get confine-node.node.mac_prefix16 )

	echo "" > $OUT_DIR/$SLV_CFG
	uci_set $SLV_CFG.$SL_ID=sliver path=$OUT_DIR
	uci_set $SLV_CFG.$SL_ID.state=allocating path=$OUT_DIR
	uci_set $SLV_CFG.$SL_ID.container_nr=$CT_NR path=$OUT_DIR
	

	local IF_KEY=
	for IF_KEY in $IF_KEYS; do
	
	    local IF_TYPE="$( uci_get $SRC_CFG.$SL_ID.if${IF_KEY}_type soft,quiet,path=$SRC_DIR )"

	    if [ $IF_TYPE ]; then
		
		local IF_MAC=${MAC_PREFIX16}:${NODE_ID:0:2}:${NODE_ID:2:2}:${CT_NR}:${IF_KEY}
		
		if [ "$IF_TYPE" = "internal" ] && [ "$IF_KEY" = "00" ]; then

		    local IF_PRIV_IPV4=$( uci_get confine-node.node.priv_ipv4_prefix24 ).$(( 16#${CT_NR} ))/25
		    local IF_PRIV_IPV6=$( uci_get confine-defaults.defaults.priv_ipv6_prefix48 ):0:${SL_ID:0:4}:${SL_ID:4:4}:${SL_ID:8:4}:0/64
		    
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_type
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_mac $IF_MAC
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_ipv4_proto static
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_ipv4 $IF_PRIV_IPV4
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_ipv6_proto static
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_ipv6 $IF_PRIV_IPV6

		elif [ "$IF_TYPE" = "public" ] && [ "$IF_KEY" = "01" ]; then

		    local IF_PUBL_IPV6=$( uci_get confine-testbed.testbed.mgmt_ipv6_prefix48 ):${NODE_ID}:${SL_ID:0:4}:${SL_ID:4:4}:${SL_ID:8:4}:${IF_KEY}/64

		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_type
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_mac $IF_MAC
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_ipv6_proto static
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_ipv6 $IF_PUBL_IPV6

		    local IF_PROTO=$( uci_get $SRC_CFG.$SL_ID.if${IF_KEY}_ipv4_proto soft,path=$SRC_DIR )

		    if [ "$IF_PROTO" = "static" ] ; then

			local IF_PUBL_IPV4=$( confine_allocate_public_ipv4 $SL_ID )

			uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_ipv4_proto static
			uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_ipv4 $IF_PUBL_IPV4

		    elif [ "$IF_PROTO" = "dhcp" ] ; then

			uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_ipv4_proto dhcp
		    fi


		elif [ "$IF_TYPE" = "isolated" ] && [ $(( 16#${IF_KEY} )) -ge 2 ] && \
		    uci_test $SRC_CFG.$SL_ID.if${IF_KEY}_parent soft,path=$SRC_DIR ; then

		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_type
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_mac $IF_MAC
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver $OUT_DIR $SLV_CFG.$SL_ID if${IF_KEY}_parent

		else
		    err $FUNCNAME "Failed allocating sliver_id=$SL_ID if_type=$IF_TYPE" soft
		    continue
		fi

	    fi
	done



	local FS_URL=$( uci_get $SLC_CFG.$SL_ID.fs_template_url path=$OUT_DIR )

	if echo $FS_URL | grep openwrt >/dev/null ; then

	    lxc.lib lxc_create_uci $CT_NR confine-defaults.openwrt
	    uci_del lxc.$CT_NR.rootfs_url

	elif echo $FS_URL | grep debian >/dev/null ; then

	    lxc.lib lxc_create_uci $CT_NR confine-defaults.debian
	    uci_del lxc.$CT_NR.rootfs_url

	fi

	uci_set lxc.$CT_NR.tag=confine-sliver-$SL_ID

	local IF_KEY=
	for IF_KEY in $IF_KEYS; do
	
	    local IF_TYPE=$( uci_get $SLV_CFG.$SL_ID.if${IF_KEY}_type soft,quiet,path=$OUT_DIR )

	    if [ $IF_TYPE ]; then
		
		local IF_PAIR=${CONFINE_VNET_PREFIX}-${CT_NR}-${IF_KEY}

		local IF_MAC=$(     uci_get $SLV_CFG.$SL_ID.if${IF_KEY}_mac        soft,quiet,path=$OUT_DIR )
		local IF_PROTO=$(   uci_get $SLV_CFG.$SL_ID.if${IF_KEY}_ipv4_proto soft,quiet,path=$OUT_DIR )
		local IF_IPV4=$(    uci_get $SLV_CFG.$SL_ID.if${IF_KEY}_ipv4       soft,quiet,path=$OUT_DIR )
		local IF_IPV6=$(    uci_get $SLV_CFG.$SL_ID.if${IF_KEY}_ipv6       soft,quiet,path=$OUT_DIR )
		local IF_PARENT=$(  uci_get $SLV_CFG.$SL_ID.if${IF_KEY}_parent     soft,quiet,path=$OUT_DIR )
		local IF_VLANTAG=$( uci_get $SLC_CFG.$SL_ID.vlan_nr                soft,quiet,path=$OUT_DIR )
		
		if [ "$IF_TYPE" = "internal" ] && [ "$IF_KEY" = "00" ]; then
		    
		    uci_set lxc.$CT_NR.if${IF_KEY}_type=veth
		    uci_set lxc.$CT_NR.if${IF_KEY}_pair=$IF_PAIR
		    uci_set lxc.$CT_NR.if${IF_KEY}_name=internal
		    uci_set lxc.$CT_NR.if${IF_KEY}_netconf=internal
		    uci_set lxc.$CT_NR.if${IF_KEY}_mac=$IF_MAC
		    uci_set lxc.$CT_NR.if${IF_KEY}_ipv4_proto=$IF_PROTO
		    uci_set lxc.$CT_NR.if${IF_KEY}_ipv4=$IF_IPV4
		    uci_set lxc.$CT_NR.if${IF_KEY}_ipv6_proto=static
		    uci_set lxc.$CT_NR.if${IF_KEY}_ipv6=$IF_IPV6


		elif [ "$IF_TYPE" = "public" ] && [ "$IF_KEY" = "01" ]; then

		    uci_set lxc.$CT_NR.if${IF_KEY}_type=veth
		    uci_set lxc.$CT_NR.if${IF_KEY}_pair=$IF_PAIR
		    uci_set lxc.$CT_NR.if${IF_KEY}_name=local
		    uci_set lxc.$CT_NR.if${IF_KEY}_netconf=local
		    uci_set lxc.$CT_NR.if${IF_KEY}_mac=$IF_MAC
		    uci_set lxc.$CT_NR.if${IF_KEY}_ipv4_proto=$IF_PROTO
		    uci_set lxc.$CT_NR.if${IF_KEY}_ipv6_proto=static
		    uci_set lxc.$CT_NR.if${IF_KEY}_ipv6=$IF_IPV6

		    if [ "$IF_PROTO" = "static" ] ; then
			uci_set lxc.$CT_NR.if${IF_KEY}_ipv4=$IF_IPV4
		    fi


		elif [ "$IF_TYPE" = "isolated" ] && [ "$IF_VLANTAG" ] && [ $(( 16#${IF_KEY} )) -ge 2 ] ; then

		    uci_set lxc.$CT_NR.if${IF_KEY}_type=vlan
		    uci_set lxc.$CT_NR.if${IF_KEY}_vlanphy=$IF_PARENT
		    uci_set lxc.$CT_NR.if${IF_KEY}_vlantag=$IF_VLANTAG

		else
		    err $FUNCNAME "Failed allocating sliver_id=$SL_ID if_type=$IF_TYPE" soft
		    continue
		fi

	    fi
	done


	uci_set $SLV_CFG.$SL_ID.state=allocated path=$OUT_DIR

	uci_show $SLC_CFG.$SL_ID path=$OUT_DIR | sed s/$SLC_CFG/confine-slices/  | uci_merge confine-slices 
	uci_show $SLV_CFG.$SL_ID path=$OUT_DIR | sed s/$SLV_CFG/confine-slivers/ | uci_merge confine-slivers

	uci_show confine-slivers.$SL_ID | uci_dot_to_file confine-slivers
    fi
#   done

}

confine_sliver_deploy() {

    echo "$FUNCNAME $# $@" >&2

    local SL_ID=$( check_slice_id $1 )
    local SRC="${2:--}"
    local SRC_CFG=$( date +%s )-$BASHPID-deploy
    local SRC_DIR=$CONFINE_RPC_DIR
    
    local LXC_IMAGES_PATH=$( uci_get lxc.general.lxc_images_path )
    local LXC_TEMPLATES_PATH=$( uci_get lxc.general.lxc_templates_path )
    local LXC_SCRIPTS_PATH=$( uci_get lxc.general.lxc_scripts_path )
    
    cat $SRC > $SRC_DIR/$SRC_CFG
#    cat $SRC_DIR/$SRC_CFG >&2

    local NODE_ID=$( uci_get confine-node.node.id )
    local CT_NR=$( uci_get confine-slivers.$SL_ID.container_nr soft )
    local FS_URL=$( uci_get confine-slices.$SL_ID.fs_template_url soft )

    if  [ "$( uci_get $SRC_CFG.${SL_ID}_${NODE_ID} soft,path=$SRC_DIR )" = "sliver" ] && \
	[ "$( uci_get confine-slices.$SL_ID soft )" = "slice" ] && \
	[ "$( uci_get confine-slivers.$SL_ID soft )" = "sliver" ] && \
	[ "$( uci_get confine-slivers.$SL_ID.state soft )" = "allocated" ] && \
	[ "$CT_NR" ] && [ "$FS_URL" ] ; then

	uci_set confine-slivers.$SL_ID.state=deploying

	local FS_COMP=$( ( echo $FS_URL | grep -e "\.tgz$" >/dev/null && echo "tgz" ) ||\
                         ( echo $FS_URL | grep -e "\.tar\.gz$" >/dev/null && echo "tar.gz" ) ||\
                         ( echo $FS_URL | grep -e "\.gz$" >/dev/null && echo ".gz" ) )

	local FS_NAME=$(echo $FS_URL | awk -F'/' '{print $(NF)}' | awk -F'.' '{print $1}')
	local FS_SITE=$(echo $FS_URL | awk -F ${FS_NAME}.${FS_COMP} '{print $1}')

	[ "$FS_URL" = "${FS_SITE}${FS_NAME}.${FS_COMP}" ] ||\
                   err $FUNCNAME "Invalid $FS_URL != ${FS_SITE}${FS_NAME}.${FS_COMP}"
	
	mkdir -p $LXC_IMAGES_PATH/$CT_NR/rootfs
	install_url $FS_URL $FS_SITE $FS_NAME $FS_COMP $LXC_TEMPLATES_PATH $LXC_IMAGES_PATH/$CT_NR/rootfs install

	uci_show $SRC_CFG path=$SRC_DIR | \
	    grep -e "^$SRC_CFG.${SL_ID}_" | \
	    sed s/$SRC_CFG/confine-slice-attributes/ | \
	    uci_merge confine-slice-attributes


	lxc.lib lxc_create $CT_NR lxc.$CT_NR
	
	uci_set confine-slivers.$SL_ID.state=deployed

	uci_show confine-slivers.$SL_ID | uci_dot_to_file confine-slivers

    else
	err $FUNCNAME "slice_id= $SL_ID not properly allocated"
    fi
}


confine_sliver_start() {

    echo "$FUNCNAME $# $@" >&2

    local SL_ID=$( check_slice_id $1 )
    local CT_NR=$( uci_get confine-slivers.$SL_ID.container_nr soft )
    local LXC_IMAGES_PATH=$( uci_get lxc.general.lxc_images_path )

    if  [ "$( uci_get confine-slices.$SL_ID soft )" = "slice" ] && \
	[ "$( uci_get confine-slivers.$SL_ID soft )" = "sliver" ] && \
	[ "$( uci_get confine-slivers.$SL_ID.state soft )" = "deployed" ] && \
	[ "$CT_NR" ] && \
	[ -d $LXC_IMAGES_PATH/$CT_NR/rootfs ] && \
	[ -f $LXC_IMAGES_PATH/$CT_NR/config ] ; then

	uci_set confine-slivers.$SL_ID.state=starting

	lxc.lib lxc_start $CT_NR

	if lxc-info -n $CT_NR 2>/dev/null | grep -e "^state:" | grep -e "RUNNING" >/dev/null ; then
	    uci_set confine-slivers.$SL_ID.state=started
	    uci_show confine-slivers.$SL_ID | uci_dot_to_file confine-slivers
	else
	    lxc.lib lxc_stop $CT_NR
	    uci_set confine-slivers.$SL_ID.state=error
	    err $FUNCNAME "Failed starting slice_id=$SL_ID" soft
	fi


    else
	err $FUNCNAME "slice_id=$SL_ID not properly deployed"
    fi

}


confine_sliver_stop() {

    echo "$FUNCNAME $# $@" >&2

    local SL_ID=
    for SL_ID in $( [ "$1" = "all" ] && ( uci_get_sections confine-slivers sliver soft,quiet || true ) || check_slice_id $1 ); do

	local CT_NR=$( uci_get confine-slivers.$SL_ID.container_nr soft )

	if  [ "$CT_NR" ] ; then
	    
	    if lxc-info -n $CT_NR 2>/dev/null | grep -e "^state:" | grep -e "RUNNING" >/dev/null ; then
		lxc.lib lxc_stop $CT_NR
	    fi
	    
	    if [ "$( uci_get confine-slivers.$SL_ID.state )" = "started" ] ; then
		uci_set confine-slivers.$SL_ID.state=deployed
	    fi
	    
	    uci_show confine-slivers.$SL_ID | uci_dot_to_file confine-slivers | grep -v container_nr
	    
	else
	    err $FUNCNAME "Failed retrieving container_nr for slice_id=$SL_ID " soft
	fi
    done
}


confine_sliver_remove() {

    echo "$FUNCNAME $# $@" >&2

    local SLICE_ID=
    for SLICE_ID in $( [ "$1" = "all" ] && ( uci_get_sections confine-slivers sliver soft,quiet || true ) || check_slice_id $1 ); do

	local CT_NR=$( uci_get confine-slivers.$SLICE_ID.container_nr soft )
	
	if [ "$CT_NR" ] ; then
	    lxc.lib lxc_stop $CT_NR
	    lxc.lib lxc_purge $CT_NR
	    #uci_del lxc.$CT_NR soft
	else
	    err $FUNCNAME "Failed retrieving container_nr for slice_id=$SLICE_ID " soft
	fi

	local SLIVER_ID=
	local SLIVERS="$( for SLIVER_ID in $( uci_get_sections confine-slice-attributes sliver ); \
	    do echo $SLIVER_ID | grep -e "${SLICE_ID}_"; done )"

	uci_del confine-slivers.$SLICE_ID soft
	uci_del confine-slices.$SLICE_ID soft

    done
}




help() {
       cat <<EOF
help is on the way...
EOF
}


CMD=$( echo $0 | awk -F'/' '{print $(NF)}' )

if [ "$CMD" = "confine.lib" ]; then

    if [ "${1:-}" ]; then
	"$@"
    else
	echo "hmmm args: $@"
	help
    fi

else

    case "$CMD" in
	confine_node_customize) $CMD ;;
	confine_sliver_allocate|confine_sliver_deploy) $CMD $1 ${2:-};;
	confine_sliver_start|confine_sliver_stop|confine_sliver_remove) $CMD $1;;
	*) help;;
    esac

fi
