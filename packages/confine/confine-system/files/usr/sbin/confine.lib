#!/bin/bash

set -u


CONFINE_RPC_ARG_DIR=/var/run/confine/rpc-args

CONFINE_CONTAINER_NR_MIN_DEC=1
CONFINE_CONTAINER_NR_MAX_DEC=126 # there are only 126 private IPs

UCI_DEFAULT_PATH=/etc/config
ERR_LOG_TAG='CONFINE'


. /usr/sbin/lxc.functions


slice_id() {
    local SL_ID_HEX="$1"

    echo $SL_ID_HEX | grep -e "^[0-9,a-f][0-9,a-f][0-9,a-f][0-9,a-f][0-9,a-f][0-9,a-f][0-9,a-f][0-9,a-f][0-9,a-f][0-9,a-f][0-9,a-f][0-9,a-f]$" >/dev/null || \
	err $FUNCNAME "slice_id=$SL_ID_HEX bust be 12-digit hex (lower-case) value"

    echo "$SL_ID_HEX"
}


confine_system_check() {


    uci_show confine-defaults soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-defaults"
    uci_show confine-testbed  soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-testbed"
    uci_show confine-server   soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-server"
    uci_show confine-node     soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-node"
    uci_show confine-slices   soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-slices"
    uci_show confine-slivers  soft,quiet >/dev/null || err $FUNCNAME "Missing config: confine-slivers"

    uci_check_clean network
    uci_check_clean lxc
    uci_check_clean confine-defaults
    uci_check_clean confine-testbed
    uci_check_clean confine-server
    uci_check_clean confine-node

    [ -d $CONFINE_RPC_ARG_DIR ] || mkdir -p $CONFINE_RPC_ARG_DIR

}




confine_set_rd_state() {

    echo "$FUNCNAME $# $@" >&2
    local STATE=$1

    if [ "$STATE" = running ]; then
	confine_system_check

	uci_set confine-node.node.state=$STATE
	
    elif [ "$STATE" = installing ] || [ "$STATE" = maintenance ]; then
	
	local SLIVER=
	for SLIVER in $( uci_get_sections confine-slivers sliver soft,quiet ); do

	    confine_sliver_stop "SLIVER"
	done
	
	uci_set confine-node.node.state=$STATE
    else
	err $FUNCNAME "invalid state"
	
    fi
    
}


confine_allocate_container() {

    local SL_ID_HEX=$( slice_id $1 )
    local CT_NR_HEX=${SL_ID_HEX:10:2}

    local OPT_CMD=${2:-}
    local CMD_SOFT=$( echo "$OPT_CMD" | grep -e "soft" > /dev/null && echo "soft," )

    [ $(( 16#${CT_NR_HEX} )) -ge $CONFINE_CONTAINER_NR_MIN_DEC ] && [ $(( 16#${CT_NR_HEX} )) -le $CONFINE_CONTAINER_NR_MAX_DEC ] || \
	CT_NR_HEX=$( printf "%.2x\n" $CONFINE_CONTAINER_NR_MAX_DEC )

    local SLIVERS="$( uci_get_sections confine-slivers sliver soft )"
    local LXC_CTS="$( uci_get_sections lxc container soft )"

    local TMP_SL_ID=
    local CONFINE_CTS=

    for TMP_SL_ID in $SLIVERS ; do
	local HEX=$( uci_get confine-slivers.$TMP_SL_ID.container_nr soft,quiet)

	[ $HEX ] || continue

	echo "$CONFINE_CTS" | grep $HEX && \
	    err $FUNCNAME "container_nr=$HEX used twice !!!"

	CONFINE_CTS="$( [ "$CONFINE_CTS" ] && echo "$CONFINE_CTS $HEX" || echo "$HEX" )"
    done

    #echo "SL_ID_HEX=$SL_ID_HEX CT_NR_HEX=$CT_NR_HEX SLIVERS=$SLIVERS CONFINE_CTS=$CONFINE_CTS" >&2


    if echo "$CONFINE_CTS $LXC_CTS" | grep $CT_NR_HEX >/dev/null ; then

	CT_NR_HEX=

	local CT_NR_DEC=$(( 16#${CT_NR_HEX} ))
	local DEC=

	for DEC in $( seq $CONFINE_CONTAINER_NR_MIN_DEC $CONFINE_CONTAINER_NR_MAX_DEC ) ; do

	    local HEX=$( printf "%.2x\n" $(( ( $CONFINE_CONTAINER_NR_MAX_DEC + 1 ) - $DEC )) )

	    if ! echo "$CONFINE_CTS $LXC_CTS" | grep $HEX >/dev/null ; then

		CT_NR_HEX=$HEX
		break
	    fi
	done
    fi

    [ $CT_NR_HEX ] || \
	{ err $FUNCNAME "Failed allocating container_nr" $CMD_SOFT; return 1; }
    
    echo $CT_NR_HEX
}


confine_allocate_public_ipv4() {

    local SL_ID_HEX=$( slice_id $1 )

    local OPT_CMD=${2:-}
    local CMD_SOFT=$( echo "$OPT_CMD" | grep -e "soft" > /dev/null && echo "soft," )

    local SLIVERS="$( uci_get_sections confine-slivers sliver soft )"
    local PROTO_IPS="$( uci_get confine-node.node.rd_public_ipv4_proto soft)"
    local AVAIL_IPS="$( uci_get confine-node.node.rd_public_ipv4_addrs soft)"
    local TMP_SL_ID=
    local TMP_IP=
    local USED_IPS=

    [ "$PROTO_IPS" = "static" ] || \
	err $FUNCNAME "pre-allocation of public ipv4 addresses only possible with node.rd_public_ipv4_proto=static"

    for TMP_SL_ID in $SLIVERS; do

	if [ "$( uci_get confine-slivers.$TMP_SL_ID.if01_ipv4 soft,quiet )" = "public" ]; then
	    TMP_IP=$( uci_get confine-slivers.$TMP_SL_ID.if01_ipv4 soft,quiet )

	    echo "$USED_IPS" | grep $TMP_IP >/dev/null && \
		err $FUNCNAME "public ip=$TMP_IP used twice !!!"

	    USED_IPS="$( [ "$USED_IPS" ] && echo "$USED_IPS $TMP_IP" || "$TMP_IP" )"
	fi
    done


    for TMP_IP in $AVAIL_IPS ; do

	if ! echo "$USED_IPS" | grep $TMP_IP > /dev/null; then

	    echo $TMP_IP
	    return 0

	fi
    done

    err $FUNCNAME "Failed allocating free public ip from $AVAIL_IPS" $CMD_SOFT

    return 1
}



confine_sliver_allocate() {

    confine_system_check

    local SRC="${1:--}"
    local SRC_CFG=allocate-$( date +%s )-$BASHPID
    local SRC_DIR=$CONFINE_RPC_ARG_DIR
    
    cat $SRC > $SRC_DIR/$SRC_CFG

    local NODE_ID=$( uci_get confine-node.node.id )
    local SL_ID=
    
    for SL_ID in $( uci_get_sections $SRC_CFG sliver soft,path=$SRC_DIR ); do

	SL_ID=$( slice_id $SL_ID )

	[ "$( uci_get confine-slices.$SL_ID soft,quiet )" = "slice" ] && \
	    err $FUNCNAME "slice=$SL_ID already defined"

	confine_sliver_destroy $SL_ID

	true && \
	    uci_test $SRC_CFG.$SL_ID.user_pubkey     soft,path=$SRC_DIR && \
	    uci_test $SRC_CFG.$SL_ID.fs_template_url soft,path=$SRC_DIR && \
	    uci_test $SRC_CFG.$SL_ID.exp_data_url    soft,path=$SRC_DIR || \
	    err $FUNCNAME "Missing obligatory sliver parameter in $SRC_CFG.$SL_ID..."

	confine_allocate_container $SL_ID soft >/dev/null|| \
	    err $FUNCNAME "Failed allocating container_nr"


	if [ "$( uci_get $SRC_CFG.$SL_ID.if01_type soft,quiet,path=$SRC_DIR )" = "public" ] && \
	    [ "$( uci_get $SRC_CFG.$SL_ID.if01_proto soft,quiet,path=$SRC_DIR )" = "static" ] ; then
	    
	    confine_allocate_public_ipv4 $SL_ID soft >/dev/null|| \
		err $FUNCNAME "Failed allocating public ip"
	fi
	
	


	uci_set confine-slices.$SL_ID=slice path=$UCI_DEFAULT_PATH
	uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.slice  confine-slices.$SL_ID user_pubkey
	uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.slice  confine-slices.$SL_ID vlan_nr
	uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.slice  confine-slices.$SL_ID fs_template_url
	uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.slice  confine-slices.$SL_ID exp_data_url


	uci_set confine-slivers.$SL_ID=sliver path=$UCI_DEFAULT_PATH

	uci_set confine-slivers.$SL_ID.state=allocating


	local CT_NR=$( confine_allocate_container $SL_ID )
	local IF_KEYS="$( uci_get lxc.general.lxc_if_keys )"
	local MAC_PREFIX16=$( uci_get confine-node.node.mac_prefix16 )
	local FS_URL=$( uci_get confine-slices.$SL_ID.fs_template_url )

	uci_set confine-slivers.$SL_ID.container_nr=$CT_NR

	
	if echo $FS_URL | grep openwrt >/dev/null ; then

	    lxc.lib lxc_create_uci $CT_NR confine-defaults.openwrt

	elif echo $FS_URL | grep debian >/dev/null ; then

	    lxc.lib lxc_create_uci $CT_NR confine-defaults.debian
	fi


	local IF_KEY=
	for IF_KEY in $IF_KEYS; do
	
	    local IF_TYPE="$( uci_get $SRC_CFG.$SL_ID.if${IF_KEY}_type soft,quiet,path=$SRC_DIR )"

	    if [ $IF_TYPE ]; then
		
		local IF_MAC=${MAC_PREFIX16}:${NODE_ID:0:2}:${NODE_ID:2:2}:${CT_NR}:${IF_KEY}
		
		if [ "$IF_TYPE" = "internal" ] && [ "$IF_KEY" = "00" ]; then

		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_type
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_mac $IF_MAC

		    uci_set lxc.$CT_NR.if${IF_KEY}_type=veth
		    uci_set lxc.$CT_NR.if${IF_KEY}_name=internal
		    uci_set lxc.$CT_NR.if${IF_KEY}_netconf=internal
		    uci_set lxc.$CT_NR.if${IF_KEY}_mac=$IF_MAC
		    
		    local IF_PRIV_IPV4=$( uci_get confine-node.node.priv_ipv4_prefix24 ).$(( 16#${CT_NR} ))/25
		    local IF_PRIV_IPV6=$( uci_get confine-node.node.priv_ipv6_prefix48 ):0:${SL_ID:0:4}:${SL_ID:4:4}:${SL_ID:8:4}:0/64
		    
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_ipv4_proto static
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_ipv4 $IF_PRIV_IPV4
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_ipv6_proto static
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_ipv6 $IF_PRIV_IPV6

		    uci_set lxc.$CT_NR.if${IF_KEY}_proto=static
		    uci_set lxc.$CT_NR.if${IF_KEY}_ipv4=$IF_PRIV_IPV4
		    uci_set lxc.$CT_NR.if${IF_KEY}_ipv6=$IF_PRIV_IPV6


		elif [ "$IF_TYPE" = "public" ] && [ "$IF_KEY" = "01" ]; then

		    local IF_PUBL_IPV6=$( uci_get confine-testbed.testbed.mgmt_ipv6_prefix48 ):${NODE_ID}:${SL_ID:0:4}:${SL_ID:4:4}:${SL_ID:8:4}:${IF_KEY}/64

		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_type
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_mac $IF_MAC
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_ipv6_proto static
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_ipv6 $IF_PUBL_IPV6

		    uci_set lxc.$CT_NR.if${IF_KEY}_type=veth
		    uci_set lxc.$CT_NR.if${IF_KEY}_name=local
		    uci_set lxc.$CT_NR.if${IF_KEY}_netconf=local
		    uci_set lxc.$CT_NR.if${IF_KEY}_mac=$IF_MAC
		    uci_set lxc.$CT_NR.if${IF_KEY}_ipv6_proto=static
		    uci_set lxc.$CT_NR.if${IF_KEY}_ipv6=$IF_PUBL_IPV6

		    local IF_PROTO=$( uci_get $SRC_CFG.$SL_ID.if${IF_KEY}_ipv4_proto soft,path=$SRC_DIR )

		    if [ "$IF_PROTO" = "static" ] ; then

			local IF_PUBL_IPV4=$( confine_allocate_public_ipv4 $SL_ID )

			uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_ipv4_proto static
			uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_ipv4 $IF_PUBL_IPV4

			uci_set lxc.$CT_NR.if${IF_KEY}_ipv4_proto=static
			uci_set lxc.$CT_NR.if${IF_KEY}_ipv4=$IF_PUBL_IPV4


		    elif [ "$IF_PROTO" = "dhcp" ] ; then

			uci_set lxc.$CT_NR.if${IF_KEY}_ipv4_proto=dhcp
		    fi


		elif [ "$IF_TYPE" = "isolated" ] && [ $(( 16#${IF_KEY} )) -ge 2 ] && \
		    uci_test $SRC_CFG.$SL_ID.if${IF_KEY}_parent soft,path=$SRC_DIR ; then

		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_type
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_mac $IF_MAC
		    uci_set_default $SRC_DIR $SRC_CFG.$SL_ID $UCI_DEFAULT_PATH confine-defaults.sliver confine-slivers.$SL_ID if${IF_KEY}_parent

		    uci_set lxc.$CT_NR.if${IF_KEY}_type=vlan
		    uci_set lxc.$CT_NR.if${IF_KEY}_vlanphy=$( uci_get confine-slivers.$SL_ID.if${IF_KEY}_parent )
		    uci_set lxc.$CT_NR.if${IF_KEY}_mac=$IF_MAC

		else
		    err $FUNCNAME "Failed allocating sliver_id=$SL_ID if_type=$IF_TYPE" soft
		    continue
		fi

	    fi
	done


	uci_set confine-slivers.$SL_ID.state=allocated 

	uci_show confine-slices.$SL_ID
	uci_show confine-slivers.$SL_ID

    done

}

confine_sliver_deploy() {
    echo "$FUNCNAME $# $@" >&2


    local SRC="${1:--}"
    local SRC_CFG=deploy-$( date +%s )-$BASHPID
    local SRC_DIR=$CONFINE_RPC_ARG_DIR

    local LXC_IMAGES_PATH=$( uci_get lxc.general.lxc_images_path )
    local LXC_TEMPLATES_PATH=$( uci_get lxc.general.lxc_templates_path )
    local LXC_SCRIPTS_PATH=$( uci_get lxc.general.lxc_scripts_path )
    
    cat $SRC > $SRC_DIR/$SRC_CFG

    local NODE_ID=$( uci_get confine-node.node.id )
    local SL_ID=
    
    for SL_ID in $( uci_get_sections $SRC_CFG sliver_attributes soft,path=$SRC_DIR ); do

	SL_ID=$( slice_id $SL_ID )

	local CT_NR=$( uci_get confine-slivers.$SL_ID.container_nr soft )
	local FS_URL=$( uci_get confine-slices.$SL_ID.fs_template_url soft )

	if  [ "$( uci_get confine-slices.$SL_ID soft,quiet )" = "slice" ] && \
	    [ "$( uci_get confine-slivers.$SL_ID soft,quiet )" = "sliver" ] && \
	    [ "$( uci_get confine-slivers.$SL_ID.state soft,quiet )" = "allocated" ] && \
	    [ CT_NR=$( uci_get confine-slivers.$SL_ID.container_nr soft ) ] && \
	    [ FS_URL=$( uci_get confine-slices.$SL_ID.fs_template_url soft ) ] ; then

	    uci_set confine-slivers.$SL_ID.state=deploying


	    local FS_COMP=$( ( echo $FS_URL | grep -e "\.tgz$" >/dev/null && echo "tgz" ) ||\
                         ( echo $FS_URL | grep -e "\.tar\.gz$" >/dev/null && echo "tar.gz" ) ||\
                         ( echo $FS_URL | grep -e "\.gz$" >/dev/null && echo ".gz" ) )

	    local FS_NAME=$(echo $FS_URL | awk -F'/' '{print $(NF)}' | awk -F'.' '{print $1}')
	    local FS_SITE=$(echo $FS_URL | awk -F ${FS_NAME}.${FS_COMP} '{print $1}')

	    [ "$FS_URL" = "${FS_SITE}${FS_NAME}.${FS_COMP}" ] ||\
                   err $FUNCNAME "Invalid $FS_URL != ${FS_SITE}${FS_NAME}.${FS_COMP}"
	    
	    mkdir -p $LXC_IMAGES_PATH/$CT_NR/rootfs
	    install_url $FS_URL $FS_SITE $FS_NAME $FS_COMP $LXC_TEMPLATES_PATH $LXC_IMAGES_PATH/$CT_NR/rootfs install

	else
	    err $FUNCNAME "slice and sliver $SL_ID not (properly) allocated"
	fi

	uci_set confine-slivers.$SL_ID.state=deployed
	uci_show confine-slivers.$SL_ID

    done

}

confine_sliver_start() {

    local SL_ID=$( slice_id $1 )

    echo "$FUNCNAME $# $@" >&2
}


confine_sliver_stop() {

    local SL_ID=$( slice_id $1 )

    #echo "$FUNCNAME $# $@" >&2
}

confine_sliver_destroy() {

    local SL_ID=$( slice_id $1 )

    #echo "$FUNCNAME $# $@" >&2

    confine_sliver_stop    $SL_ID

}




help() {
       cat <<EOF
EOF
}




if [ "${1:-}" ]; then
    "$@"
else
    help
fi
