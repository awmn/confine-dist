#!/bin/sh
# Contributors: Pau <p4u@dabax.net>, Ivan Vilata-i-Balaguer <ivan@pangea.org>, Daniel Marti <mvdan@gmail.com>
# This scripts exepects a partition table such as [sda1][sda2][free]
# and creates sda3 for overlayFS and sda4 for home
# sfdisk and partx are needed

# Stop as soon as problems are found, or detect and handle them properly.
set -e

# Partitioning only takes place if there is at least this much free space.
MIN_FREE_SIZE_MiB=$((3 * 1024)) # 3 GiB
OVERLAY_SIZE="20" #in %
HOME_SIZE="80" #in %
SFDISK="sfdisk"
MKFS="mkfs.ext4"
PARTX="partx"
TMPFS="64M"

checksystem() {
	if ! test -b ${DISK}2; then 
		echo "${DISK}2 does not exist, doing nothing" >&2
		exit 1
	fi

	if test -b ${DISK}3; then
		echo "${DISK}3 partition exists, doing nothing" >&2
		exit 1
	fi

	if ! opkg list | grep -q block-mount; then
		echo "block-mount package is not installed, doing nothing" >&2
		exit 1
	fi

	local program
	for program in $SFDISK $MKFS $PARTX; do
		if ! which $program > /dev/null; then
			echo "$program is not installed, doing nothing" >&2
			exit 1
		fi
	done

	if ! $SFDISK -q -V -L ${DISK}; then
		echo "CRITICAL, something wrong in the partition table" >&2
		exit 1
	fi

	local disk_name disk_size_kib used_size_kib part_size_kib
	disk_name=$(basename $DISK)
	disk_size_kib=$(sed -ne "s/.* \([0-9]*\) $disk_name$/\1/p" /proc/partitions)
	used_size_kib=0
	for part_size_kib in $(sed -ne "s/.* \([0-9]*\) $disk_name[0-9][0-9]*$/\1/p" /proc/partitions); do
		used_size_kib=$((used_size_kib + part_size_kib))
	done
	if [ $(((disk_size_kib - used_size_kib)/1024)) -lt $MIN_FREE_SIZE_MiB ]; then
		echo "Insufficient free disk space (need at least $MIN_FREE_SIZE_MiB MiB)" >&2
		exit 1
	fi
}


get_info() {
	local disk_geometry

	disk_geometry=$($SFDISK -R -G $DISK)
	disk_cylinders=$(echo "$disk_geometry" | awk '{print $2}')
	disk_heads=$(echo "$disk_geometry" | awk '{print $4}')
	disk_sectors_track=$(echo "$disk_geometry" | awk '{print $6}')

	start_cylinder=$(($($SFDISK -R -l $DISK 2>/dev/null | grep ${DISK}2 | tr -d \- | awk '{print $3}')+1))
	available_cylinders=$(($disk_cylinders-$start_cylinder-2))
	overlay_cylinders=$(($available_cylinders*$OVERLAY_SIZE/100))	
	home_cylinders=$(($available_cylinders*$HOME_SIZE/100))

	echo -e "\n==> Information of target $DISK (in cylinders)\n"
	echo "-----------------------------"
	echo "Available: $disk_cylinders"
	echo "Overlay: $overlay_cylinders"
	echo "Home: $home_cylinders"
	echo "-----------------------------"
	
	if [ -z "$disk_cylinders" -o -z "$disk_heads" -o -z "$disk_sectors_track" \
	     -o -z "$start_cylinder" -o -z "$available_cylinders" \
	     -o -z "$overlay_cylinders" -o -z "$home_cylinders" ]; then
		echo "CRITICAL, cannot get info from disk table" >&2
		exit 1
	fi
}


write_fstab() {

	cat > /etc/config/fstab <<- EOF
	# Added by confine system
	config global automount
		option from_fstab 1
		option anon_mount 0

	config global autoswap
		option from_fstab 1
		option anon_swap 0

	config mount
		option target	/overlay
		option device	${DISK}3
		option fstype	ext4
		option options	rw,noatime,nodiratime
		option enabled	1
		option enabled_fsck 1

	config mount
		option target	/home
		option device	${DISK}4
		option fstype	ext4
		option options	rw,noatime,nodiratime
		option enabled	1
		option enabled_fsck 1

	config swap
		option device	/dev/example
		option enabled	0

	config mount
		option target /tmp
	  	option device tmpfs
		option fstype tmpfs
		option options remount,rw,nosuid,nodev,noatime,size=$TMPFS
		option enabled_fsck 0
		option enabled 1
	EOF
	mkdir -p /overlay /home
	# Badly handled test exit status here.
	/etc/init.d/fstab enable || true
}


set_lxc_to_home() {
	mv /lxc/images /lxc/images.old
	mv /lxc/templates /lxc/templates.old
	ln -s /home/lxc/images /lxc/images
	ln -s /home/lxc/templates /lxc/templates
}


DISK=$(sed -rn 's#.*\broot=([^0-9]+).*#\1#p' /proc/cmdline)

echo -e "\n==> Checking system\n"
checksystem
echo -e "\n==> System OK\n"

get_info

echo -e "\n==> Disk information fetched\n"
echo "-----------------------------"
echo "total cylinders: $disk_cylinders"
echo "first available cylinder: $start_cylinder"
#echo "available: $available_cylinders"
#$overlay_cylinders
#$home_cylinders
echo "-----------------------------"

echo -e "\n==> Input for sfdisk\n"
echo "-----------------------------"
echo "${DISK}3: $start_cylinder $overlay_cylinders L"
echo "${DISK}4: $(($start_cylinder+$overlay_cylinders)) $home_cylinders L"
echo "-----------------------------"

sfdisk_chs="$SFDISK -C $disk_cylinders -H $disk_heads -S $disk_sectors_track"
# sfdisk may fail to reread the partition table and exit with an error code,
# but we perform our own check later.

$sfdisk_chs -q $DISK -L -N3 --no-reread << EOF || true
$start_cylinder $overlay_cylinders L
EOF

$sfdisk_chs -q $DISK -L -N4 --no-reread << EOF || true
$(($start_cylinder+$overlay_cylinders)) $home_cylinders L
EOF

echo -e "\n==> Writing fstab and enabling block-mount\n"
write_fstab

echo -e "\n==> Pointing current LXC directories to new home\n"
set_lxc_to_home

echo -e "\n==> Telling the kernel about new partitions\n"
$PARTX --add --nr 3:4 $DISK
sleep 10

if ! test -b ${DISK}4; then
	cat >&2 <<- EOF
	Warning: it is not possible to use the new partitions!

	==================================================================
	 Seems that the kernel can not access the new partitions.
	 Rebooting is needed to be able to format and use the partitions.
	 A script has been added to uci-defaults, please reboot.
	==================================================================
	EOF

        cat > /etc/uci-defaults/format_partitions.sh <<- EOF
	#!/bin/sh
	umount ${DISK}3
	umount ${DISK}4
	$MKFS ${DISK}3
	$MKFS ${DISK}4
	mkdir /tmp/disk4
	mount ${DISK}4 /tmp/disk4
	mkdir /tmp/disk4/lxc
	mkdir /tmp/disk4/lxc/templates /tmp/disk4/lxc/images
	umount /tmp/disk4/
	reboot
	EOF
	exit 0
fi

echo -e "\n==> Formating partitions\n"

for pn in 3 4; do
	if ! $MKFS ${DISK}$pn; then
		echo "CRITICAL, cannot format partition ${DISK}$pn" >&2
		exit 2
	fi
	mtpt=$(mktemp -d)
	if ! mount ${DISK}$pn $mtpt; then
		echo "CRITICAL, cannot mount partition ${DISK}$pn" >&2
		exit 2
	fi
	if [ $pn = 4 ]; then
		mkdir -p $mtpt/lxc/images $mtpt/lxc/templates
	fi
	umount ${DISK}$pn
done

echo -e "\n==> Done, time to reboot the machine\n"

exit 0

